# === docker-compose.gcs.yml (Ground Control Station CLI) ===
#
# This file configures the GCS CLI container for controlling drones remotely.
# It uses host networking to communicate with drone nodes over ROS 2 DDS.
# The container is designed to be run interactively with the CLI command.
#
# Usage:
# docker compose -f docker-compose.gcs.yml run --rm -it gcs_cli ros2 run drone_gcs_cli drone_gcs_cli -d drone1
#
# The CLI defaults to targeting 'drone1'. Use the 'target' command to switch drones:
# GCS (drone1)> target drone2
#

services:
  # --- GCS CLI Service ---
  gcs_cli:
    build:
      context: ../../.. # Build using the root directory as context
      dockerfile: docker/dev/gcs/drone_gcs_cli.Dockerfile
    container_name: gcs_cli_node # Explicit name for the running container
    network_mode: "host" # ESSENTIAL: Use the host's network for ROS 2 DDS communication
    volumes:
      # Mount a host directory into the container for persistent logs
      - ../../../logs:/root/ws_droneOS/logs
      # Mount the FastDDS config file
      - ../../../fastdds_config.xml:/root/ws_droneOS/fastdds_config.xml
    environment:
      # Set the ROS 2 DDS implementation (ensure it matches your setup)
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      # Increase ROS log verbosity
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      # DDS Domain ID (must match across all containers)
      - ROS_DOMAIN_ID=0
      # DDS Discovery settings
      - FASTRTPS_DEFAULT_PROFILES_FILE=/root/ws_droneOS/fastdds_config.xml
      # - FASTRTPS_WHITELIST_INTERFACES=all # Commented out for testing

volumes:
  logs: # Declares that the host path './logs' is expected
    driver: local
