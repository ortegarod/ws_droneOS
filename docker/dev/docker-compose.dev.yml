# === docker-compose.dev.yml (SITL Development Setup) ===
#
# This file configures the development environment for PX4 SITL simulation.
# It uses UDP communication for the Micro XRCE-DDS Agent to connect to PX4 SITL.
#
# By default, it's configured for a single drone (drone1) with:
# - ROS 2 node name: drone1
# - Drone name: drone1
# - PX4 namespace: /fmu/ (for MAV_SYS_ID=1)
# - MAVLink System ID: 1
#
# MULTI-DRONE SETUP:
# To run multiple drones in SITL:
# 1. Copy this file for each additional drone (e.g., docker-compose.dev.drone2.yml)
# 2. Change the service name to be unique (e.g., drone_core2)
# 3. Update the container_name to be unique (e.g., drone_core_node2)
# 4. Update the command section for each drone with its specific configuration:
#    - __node: Unique ROS 2 node name (e.g., drone2)
#    - drone_name: Logical drone name (e.g., drone2)
#    - px4_namespace: PX4 topic namespace (e.g., /px4_1/fmu/ for MAV_SYS_ID=2)
#    - mav_sys_id: Unique MAVLink System ID (e.g., 2)
#
# Run with: docker compose -f docker-compose.dev.yml up -d
#

services:
  # --- Drone Core Service ---
  # Runs the main drone control logic (drone_core node)
  drone_core: # Service name (must be unique across all compose files)
    build:
      context: .
      dockerfile: drone_core.dev.Dockerfile
    container_name: drone_core_node # Explicit name for the running container
    network_mode: "host" # ESSENTIAL: Use the host's network for Tailscale & agent comms
    restart: unless-stopped # Optional: Restart policy
    volumes:
      - /home/rodrigo/ws_droneOS/src:/root/ws_droneOS/src
      - /home/rodrigo/ws_droneOS/build:/root/ws_droneOS/build
      - /home/rodrigo/ws_droneOS/install:/root/ws_droneOS/install
      - /home/rodrigo/ws_droneOS/logs:/root/ws_droneOS/logs
    environment:
      # Set the ROS 2 DDS implementation (ensure it matches your setup)
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      # Increase ROS log verbosity
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      # Whitelist specific interface for Fast-RTPS
      - FASTRTPS_WHITELIST_INTERFACES=tailscale0
    depends_on:
      # Ensure the agent starts before the core logic
      - micro_agent
    # --- COMMAND OVERRIDE (CRITICAL) ---
    # Provides the specific arguments for THIS drone.
    # The ENTRYPOINT script will source setup files first
    command: ["bash", "-c", "while true; do sleep 1000; done"]

  # --- Micro XRCE-DDS Agent Service ---
  # Bridges communication between ROS 2 (DDS) and PX4 SITL instances
  # This agent is shared between all drones in the development environment
  micro_agent:
    # The Micro-XRCE-DDS-Agent source and build directories are mounted from the host.
    # You only need to rebuild the agent if you change the source code or delete the build artifacts.
    # The compiled binary and build directory persist across container restarts due to the volume mount.
    #
    # To build and run the agent inside the container:
    # 1. docker compose -f docker/dev/docker-compose.dev.drone1.yml exec micro_agent bash
    # 2. cd /root/ws_droneOS/Micro-XRCE-DDS-Agent
    # 3. mkdir build && cd build
    # 4. cmake ..
    # 5. make
    # 6. make install
    # 7. ldconfig /usr/local/lib/
    # 8. ./MicroXRCEAgent udp4 -p 8888
    build:
      context: .
      dockerfile: micro_agent.dev.Dockerfile
    container_name: micro_agent_service
    network_mode: "host"
    restart: unless-stopped
    environment:
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      - FASTRTPS_WHITELIST_INTERFACES=tailscale0
    command: ["bash", "-c", "while true; do sleep 1000; done"]
    volumes:
      - /home/rodrigo/ws_droneOS/Micro-XRCE-DDS-Agent:/root/ws_droneOS/Micro-XRCE-DDS-Agent
    # Note: Ensure the user running Docker on the host (e.g., 'rodrigo') has permission for /dev/ttyUSB0 (belongs to 'dialout' group).
    # If not, run: sudo usermod -a -G dialout rodrigo (or relevant user) and then REBOOT or log out/in.

# --- Camera Service ---
  # Builds libcamera and rpicam-apps from source for camera support
  camera_service:
    build:
      context: .
      dockerfile: camera.dev.Dockerfile
    container_name: camera_service_node
    network_mode: "host"
    restart: unless-stopped
    privileged: true
    group_add:
      - video
    devices:
      - /dev/vchiq
      - /dev/video0
      - /dev/v4l-subdev0
      - /dev/media0
      - /dev/media1
    environment:
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      - FASTRTPS_WHITELIST_INTERFACES=tailscale0
    command:
      - bash
      - -c
      - |
          /lib/systemd/systemd-udevd --daemon
          udevadm trigger
          while true; do sleep 1000; done

volumes:
  logs: # Declares that the host path './logs' is expected
    driver: local
