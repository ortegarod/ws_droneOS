# === docker-compose.yml (Template for a SINGLE Drone Raspberry Pi) ===
#
# CONTEXT: This file is configured for a single real drone, intended to run on its
# dedicated hardware (e.g., Raspberry Pi). By default, it uses the following configuration:
# - ROS 2 node name: drone1
# - Drone name: drone1
# - PX4 namespace: /fmu/
# - MAVLink System ID: 1
#
# MULTI-DRONE SETUP:
# To run multiple real drones, you need to:
# idk yet, we need to load environment variables from the companion computer that runs this container
# Future improvements could make this more dynamic through environment variables
# or configuration files.
#

services:
  # --- Drone Core Service ---
  # Runs the main drone control logic (drone_core node)
  drone_core: # Service name (can be customized, e.g., drone1_core)
    build:
      context: ../..
      dockerfile: docker/prod/drone_core.Dockerfile
    container_name: drone_core_node # Explicit name for the running container
    network_mode: "host" # ESSENTIAL: Use the host's network for Tailscale & agent comms
    restart: unless-stopped # Optional: Restart policy
    volumes:
      # Mount a host directory into the container for persistent logs
      - ./logs:/root/ws_droneOS/logs
    environment:
      # Set the ROS 2 DDS implementation (ensure it matches your setup)
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      # Increase ROS log verbosity
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      # DDS Domain ID (must match across all containers)
      - ROS_DOMAIN_ID=0
      # DDS Discovery settings
      - FASTRTPS_DEFAULT_PROFILES_FILE=/root/ws_droneOS/fastdds_config.xml
      # Whitelist specific interface for Fast-RTPS
      - FASTRTPS_WHITELIST_INTERFACES=tailscale0
    depends_on:
      # Ensure the agent starts before the core logic
      - micro_agent
    # --- COMMAND OVERRIDE (CRITICAL) ---
    # Provides the specific arguments for THIS drone.
    # The ENTRYPOINT script will source setup files first
    command: [
      "ros2", "run", "drone_core", "drone_core",
      "--ros-args",
                 # --- !!! CUSTOMIZE THESE ARGUMENTS FOR THIS SPECIFIC DRONE !!! ---
                 # NOTE: For scalable multi-drone setups, we can't hardcode these arguments.
                 #       We need to circle back and make this dynamic (e.g., via environment variables or config files).
      # --- Configuration for Drone 1 (Active) ---
      "-r", "__node:=drone1",             # Unique ROS 2 node name
      "-p", "drone_name:=drone1",         # Logical drone name parameter
      "-p", "px4_namespace:=/fmu/", # PX4 topic namespace (e.g., /px4_0/fmu/ for ID 1)
      "-p", "mav_sys_id:=1"               # Unique MAVLink System ID

      # --- Example Configuration for Drone 2 (Commented Out) ---
      # "-r", "__node:=drone2",             # Unique ROS 2 node name
      # "-p", "drone_name:=drone2",         # Logical drone name parameter
      # "-p", "px4_namespace:=/px4_1/fmu/", # PX4 topic namespace (e.g., /px4_1/fmu/ for ID 2)
      # "-p", "mav_sys_id:=2"               # Unique MAVLink System ID

      # --- Example Configuration for Drone 3 (Commented Out - Original) ---
      # "-r", "__node:=drone3",             # Unique ROS 2 node name
      # "-p", "drone_name:=drone3",         # Logical drone name parameter
      # "-p", "px4_namespace:=/px4_2/fmu/", # PX4 topic namespace (e.g., /px4_2/fmu/ for ID 3)
      # "-p", "mav_sys_id:=3"               # Unique MAVLink System ID
    ]

  # --- Micro XRCE-DDS Agent Service ---
  # Bridges communication between ROS 2 (DDS) and PX4 (Serial)
  micro_agent:
    build:
      context: ../..
      dockerfile: docker/prod/micro_agent.Dockerfile
    container_name: micro_agent_service # Explicit name for the running container
    network_mode: "host" # ESSENTIAL: Use the host's network for core comms & PX4 device access
    restart: unless-stopped # Optional: Restart policy
    devices:
      # Map the stable host symlink (created by udev rule in /etc/udev/rules.d/99-pixhawk.rules)
      # to the path the agent expects inside the container (/dev/ttyUSB0).
      # The agent command MUST use the container path (/dev/ttyUSB0).
      - "/dev/pixhawk-telem2:/dev/ttyUSB0" # STABLE_HOST_SYMLINK:CONTAINER_PATH
    environment:
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      # Increase ROS log verbosity
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      # DDS Domain ID (must match across all containers)
      - ROS_DOMAIN_ID=0
      # DDS Discovery settings
      - FASTRTPS_DEFAULT_PROFILES_FILE=/root/ws_droneOS/fastdds_config.xml
      # Whitelist specific interface for Fast-RTPS
      - FASTRTPS_WHITELIST_INTERFACES=tailscale0
    # --- Command for serial communication ---
    command: > # Use multi-line format for clarity
      bash -c "sleep 2 && \
               MicroXRCEAgent serial --dev /dev/ttyUSB0 -b 921600"
    # Note: Ensure the user running Docker on the host (e.g., 'rodrigo') has permission for /dev/ttyUSB0 (belongs to 'dialout' group).
    # If not, run: sudo usermod -a -G dialout rodrigo (or relevant user) and then REBOOT or log out/in.

# --- Camera Service ---
  # Builds libcamera and rpicam-apps from source for camera support
  camera_service:
    build:
      context: ../..
      dockerfile: docker/dev/camera.dev.Dockerfile
    container_name: camera_service_node
    network_mode: "host"
    restart: unless-stopped
    privileged: true
    group_add:
      - video
    devices:
      - /dev/vchiq
      - /dev/video0
      - /dev/v4l-subdev0
      - /dev/media0
      - /dev/media1
    environment:
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      - ROS_LOG_SEVERITY_THRESHOLD=debug
      # DDS Domain ID (must match across all containers)
      - ROS_DOMAIN_ID=0
      # DDS Discovery settings
      - FASTRTPS_DEFAULT_PROFILES_FILE=/root/ws_droneOS/fastdds_config.xml
      # Production: Use 4G/cellular interface by default, fallback to tailscale0
      - FASTRTPS_WHITELIST_INTERFACES=${NETWORK_INTERFACE:-wwan0,tailscale0}
      - DRONE_NAME=drone1 # Set a default drone name
      
      # === VIDEO STREAMING CONFIGURATION ===
      # Optimized for 4G bandwidth conservation
      - VIDEO_WIDTH=${VIDEO_WIDTH:-320}        # 320p for low bandwidth
      - VIDEO_HEIGHT=${VIDEO_HEIGHT:-240}      # 320x240 resolution
      - VIDEO_FRAMERATE=${VIDEO_FRAMERATE:-1}  # 1fps for ultra-low bandwidth
      - VIDEO_QUALITY=${VIDEO_QUALITY:-30}     # Low quality for compression
      - STREAM_TYPE=${STREAM_TYPE:-ros_compressed} # Compressed stream
      - VIDEO_FORMAT=${VIDEO_FORMAT:-XRGB8888} # Video format
    volumes:
      # Mount the FastDDS config file
      - /home/rodrigo/ws_droneOS/fastdds_config.xml:/root/ws_droneOS/fastdds_config.xml
    command:
      - bash
      - -c
      - |
          /lib/systemd/systemd-udevd --daemon
          udevadm trigger
          . /opt/ros/humble/setup.bash
          . /root/ros2_ws/install/setup.bash
          # Create a dummy calibration file to suppress warnings initially
          mkdir -p /root/.ros/camera_info/
          touch "/root/.ros/camera_info/drone1_camera.yaml"
          # Start web_video_server in background with 1fps publish rate
          ros2 run web_video_server web_video_server --ros-args -p port:=8080 -p publish_rate:=1.0 &
          # Start camera node with default settings (web server handles resizing)
          exec ros2 run camera_ros camera_node --ros-args \
            -p camera:=0 \
            -p format:=XRGB8888 \
            -p frame_id:=drone1_camera_link \
            -p camera_info_url:=file:///root/.ros/camera_info/drone1_camera.yaml

volumes:
  logs: # Declares that the host path './logs' is expected
    driver: local
